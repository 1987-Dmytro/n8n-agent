#!/usr/bin/env python3
"""
üéØ N8N-Agent CLI
–ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è workflow –≤ n8n
"""

import sys
import os
import argparse
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'core'))

from core.n8n_main_service import N8NMainService

class N8NAgentCLI:
    """CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è N8N-Agent"""
    
    def __init__(self):
        self.service = None
    
    def create_workflow(self, description: str, complexity: str = "–°—Ä–µ–¥–Ω—è—è", 
                       activate: bool = False, use_mock: bool = None) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ workflow —á–µ—Ä–µ–∑ CLI"""
        
        print("üöÄ N8N-AGENT v1.0 - AI WORKFLOW CREATOR")
        print("=" * 60)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if use_mock is None:
            claude_api_key = os.getenv('CLAUDE_API_KEY')
            use_mock = not claude_api_key or claude_api_key == 'your_claude_api_key_here'
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        self.service = N8NMainService(use_mock_claude=use_mock)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è
        params = {
            "complexity": complexity,
            "auto_activate": activate
        }
        
        print(f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        print(f"‚öôÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity}")
        print(f"‚ö° –ê–∫—Ç–∏–≤–∞—Ü–∏—è: {'–î–∞' if activate else '–ù–µ—Ç'}")
        print(f"üß† –†–µ–∂–∏–º: {'Mock Claude' if use_mock else 'Real Claude'}")
        
        # –°–æ–∑–¥–∞–µ–º workflow
        result = self.service.create_workflow_from_description(description, params)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self._display_result(result)
    
    def _display_result(self, result: dict) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è workflow"""
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("=" * 40)
        
        if result['status'] == 'success':
            workflow = result['workflow']
            
            print(f"‚úÖ –£–°–ü–ï–•! Workflow —Å–æ–∑–¥–∞–Ω")
            print(f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {workflow['name']}")
            print(f"üÜî ID: {workflow['id']}")
            print(f"üîó URL: {workflow['url']}")
            print(f"üîß Nodes: {workflow['nodes_count']}")
            print(f"üîó Connections: {workflow['connections_count']}")
            print(f"‚ö° –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if workflow['active'] else '–ù–µ—Ç'}")
            
            print(f"\nüéØ –ì–û–¢–û–í–û –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
            print(f"üëâ –û—Ç–∫—Ä–æ–π—Ç–µ: {workflow['url']}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å webhook, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º URL
            if 'webhook' in result.get('generated_data', {}).get('nodes', [{}])[0].get('type', ''):
                webhook_path = result['generated_data']['nodes'][0]['parameters'].get('path', 'webhook')
                webhook_url = f"http://localhost:5678/webhook/{webhook_path}"
                print(f"üåê Webhook URL: {webhook_url}")
            
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {result['message']}")
            print(f"üìç –≠—Ç–∞–ø: {result.get('stage', 'unknown')}")
    
    def list_examples(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è workflow"""
        
        examples = [
            {
                "description": "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ webhook –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack",
                "complexity": "–ü—Ä–æ—Å—Ç–∞—è",
                "result": "Webhook ‚Üí Set Data ‚Üí Slack"
            },
            {
                "description": "–ö–∞–∂–¥—ã–π —á–∞—Å –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ Google Sheets",
                "complexity": "–°—Ä–µ–¥–Ω—è—è", 
                "result": "Schedule ‚Üí HTTP Request ‚Üí Google Sheets"
            },
            {
                "description": "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ email —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–º–∞–Ω–¥—É",
                "complexity": "–°–ª–æ–∂–Ω–∞—è",
                "result": "Email Trigger ‚Üí File Processing ‚Üí Notifications"
            }
        ]
        
        print("üìö –ü–†–ò–ú–ï–†–´ –û–ü–ò–°–ê–ù–ò–ô –î–õ–Ø WORKFLOW")
        print("=" * 50)
        
        for i, example in enumerate(examples, 1):
            print(f"\n{i}. {example['description']}")
            print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {example['complexity']}")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {example['result']}")
        
        print(f"\nüí° –°–û–í–ï–¢–´ –ü–û –û–ü–ò–°–ê–ù–ò–Æ:")
        print("‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä (webhook, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, email)")
        print("‚Ä¢ –û–ø–∏—à–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è (–ø–æ–ª—É—á–∏—Ç—å, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å)")
        print("‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ (Slack, Sheets, email)")
        print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    
    parser = argparse.ArgumentParser(
        description="N8N-Agent v1.0 - –°–æ–∑–¥–∞–Ω–∏–µ workflow –≤ n8n –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π workflow
  python3 n8n_agent.py "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ webhook –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Slack"
  
  # –°–æ–∑–¥–∞—Ç—å —Å–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π
  python3 n8n_agent.py "–ö–∞–∂–¥—ã–π —á–∞—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ" --complexity –°–ª–æ–∂–Ω–∞—è --activate
  
  # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã
  python3 n8n_agent.py --examples
  
  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π Claude (–µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á)
  export CLAUDE_API_KEY=your_api_key
  python3 n8n_agent.py "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ CRM"
        """
    )
    
    parser.add_argument(
        'description', 
        nargs='?',
        help='–û–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è workflow'
    )
    
    parser.add_argument(
        '--complexity', '-c',
        choices=['–ü—Ä–æ—Å—Ç–∞—è', '–°—Ä–µ–¥–Ω—è—è', '–°–ª–æ–∂–Ω–∞—è'],
        default='–°—Ä–µ–¥–Ω—è—è',
        help='–°–ª–æ–∂–Ω–æ—Å—Ç—å workflow (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –°—Ä–µ–¥–Ω—è—è)'
    )
    
    parser.add_argument(
        '--activate', '-a',
        action='store_true',
        help='–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å workflow –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è'
    )
    
    parser.add_argument(
        '--mock', '-m',
        action='store_true',
        help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Mock Claude (–±–µ–∑ API)'
    )
    
    parser.add_argument(
        '--examples', '-e',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π'
    )
    
    args = parser.parse_args()
    
    cli = N8NAgentCLI()
    
    if args.examples:
        cli.list_examples()
        return
    
    if not args.description:
        print("‚ùå –û—à–∏–±–∫–∞: –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ workflow")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --examples –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–º–µ—Ä–æ–≤")
        print("üí° –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: python3 n8n_agent.py '–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ'")
        return
    
    cli.create_workflow(
        description=args.description,
        complexity=args.complexity,
        activate=args.activate,
        use_mock=args.mock
    )

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–∑–¥–∞–Ω–∏—è workflow
"""

import sys
import os
import json
sys.path.append('/Users/hdv_1987/Desktop/Projects/N8N-Agent/core')

from n8n_claude_service_mock import N8NClaudeServiceMock
from n8n_production_client import N8NProductionClient

def diagnose_workflow_issue():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º workflow"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –°–û–ó–î–ê–ù–ò–Ø WORKFLOW")
    print("=" * 60)
    
    # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º workflow —á–µ—Ä–µ–∑ Mock Claude
    print("\n1Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è workflow —á–µ—Ä–µ–∑ Mock Claude...")
    mock_claude = N8NClaudeServiceMock()
    
    description = "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ webhook –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏–∏"
    result = mock_claude.generate_workflow(description)
    
    workflow_data = result['workflow']
    
    print(f"‚úÖ Workflow —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {workflow_data['name']}")
    print(f"üîß Nodes: {len(workflow_data.get('nodes', []))}")
    print(f"üîó Connections: {len(workflow_data.get('connections', {}))}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    with open('/Users/hdv_1987/Desktop/Projects/N8N-Agent/debug_workflow.json', 'w') as f:
        json.dump(workflow_data, f, indent=2)
    
    print("üíæ Workflow —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ debug_workflow.json")
    
    # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print(f"\n2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã workflow...")
    
    required_fields = ['name', 'nodes', 'connections', 'settings', 'staticData']
    missing_fields = [field for field in required_fields if field not in workflow_data]
    
    if missing_fields:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
    else:
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º nodes
    if 'nodes' in workflow_data:
        nodes = workflow_data['nodes']
        print(f"üìä –ê–Ω–∞–ª–∏–∑ {len(nodes)} nodes:")
        
        for i, node in enumerate(nodes):
            node_fields = ['id', 'name', 'type', 'typeVersion', 'position', 'parameters']
            node_missing = [field for field in node_fields if field not in node]
            
            if node_missing:
                print(f"   ‚ùå Node {i+1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {node_missing}")
            else:
                print(f"   ‚úÖ Node {i+1}: {node.get('name')} ({node.get('type')})")
    
    # 3. –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –≤ n8n —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    print(f"\n3Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤ n8n —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π...")
    
    api_key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlYTVhZTQ3YS1hZDNmLTQ1OTYtYjE5OS05ZjA4MTE2M2M5NGQiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzQ5MzY4Njg0LCJleHAiOjE3NTE5NDcyMDB9.bvYcgPwSgZA1GEfIuBSkQ1Kv3imRu38JGdkQnEJ18VM"
    client = N8NProductionClient(api_key)
    
    create_result = client.create_workflow(workflow_data)
    
    if create_result['status'] == 'success':
        print(f"‚úÖ Workflow —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print(f"üÜî ID: {create_result['id']}")
        print(f"üîó URL: {create_result['url']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {create_result['message']}")
        print(f"üìù –ö–æ–¥ –æ—à–∏–±–∫–∏: {create_result.get('status_code', 'unknown')}")
        print(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {create_result.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        print(f"\n4Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é workflow...")
        
        simple_workflow = {
            "name": "Debug Simple Test",
            "nodes": [
                {
                    "id": "1",
                    "name": "Start",
                    "type": "n8n-nodes-base.start",
                    "typeVersion": 1,
                    "position": [100, 200],
                    "parameters": {}
                }
            ],
            "connections": {},
            "settings": {},
            "staticData": {}
        }
        
        simple_result = client.create_workflow(simple_workflow)
        
        if simple_result['status'] == 'success':
            print(f"‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π workflow —Å–æ–∑–¥–∞–Ω!")
            print(f"üéØ –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Mock workflow")
        else:
            print(f"‚ùå –î–∞–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {simple_result['message']}")

if __name__ == "__main__":
    diagnose_workflow_issue()

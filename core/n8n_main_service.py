#!/usr/bin/env python3
"""
üéØ N8N Main Service
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è workflow –æ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ –≥–æ—Ç–æ–≤–æ–≥–æ n8n workflow
"""

import os
import sys
import json
from typing import Dict, List, Optional
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from n8n_knowledge_base import N8NKnowledgeBase
from n8n_claude_service import N8NClaudeService
from n8n_claude_service_mock import N8NClaudeServiceMock
from n8n_production_client import N8NProductionClient

class N8NMainService:
    """–ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å N8N-Agent –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è workflow"""
    
    def __init__(self, use_mock_claude: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            use_mock_claude: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock –≤–µ—Ä—Å–∏—é Claude (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ API –∫–ª—é—á–∞)
        """
        self.use_mock_claude = use_mock_claude
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.knowledge_base = N8NKnowledgeBase()
        
        # Claude Service (—Ä–µ–∞–ª—å–Ω—ã–π –∏–ª–∏ mock)
        if use_mock_claude:
            self.claude_service = N8NClaudeServiceMock()
            print("üß™ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Mock Claude Service")
        else:
            self.claude_service = N8NClaudeService()
            print("üß† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π Claude API")
        
        # N8N Production Client
        self.n8n_api_key = os.getenv('N8N_API_KEY') or "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlYTVhZTQ3YS1hZDNmLTQ1OTYtYjE5OS05ZjA4MTE2M2M5NGQiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzQ5MzY4Njg0LCJleHAiOjE3NTE5NDcyMDB9.bvYcgPwSgZA1GEfIuBSkQ1Kv3imRu38JGdkQnEJ18VM"
        self.n8n_client = N8NProductionClient(self.n8n_api_key)
        
        print("‚úÖ N8N Main Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def create_workflow_from_description(self, description: str, params: Dict = None) -> Dict:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ workflow –æ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ –≥–æ—Ç–æ–≤–æ–≥–æ n8n workflow
        
        Args:
            description: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞
            params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–ª–æ–∂–Ω–æ—Å—Ç—å, —Ç–∏–ø—ã nodes –∏ —Ç.–¥.)
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è workflow
        """
        if params is None:
            params = {}
        
        print(f"\nüéØ –°–û–ó–î–ê–ù–ò–ï WORKFLOW –ò–ó –û–ü–ò–°–ê–ù–ò–Ø")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        print(f"‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        print("=" * 60)
        
        try:
            # –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è workflow
            print("\n1Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è workflow —á–µ—Ä–µ–∑ Claude AI...")
            
            claude_result = self.claude_service.generate_workflow(description, params)
            
            if claude_result['status'] != 'success':
                return {
                    "status": "error",
                    "stage": "claude_generation",
                    "message": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Claude: {claude_result['message']}"
                }
            
            workflow_data = claude_result['workflow']
            print(f"‚úÖ Workflow —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {workflow_data['name']}")
            print(f"üîß Nodes: {len(workflow_data['nodes'])}")
            print(f"üîó Connections: {len(workflow_data['connections'])}")
            
            # –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ workflow –≤ n8n
            print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ workflow –≤ n8n...")
            
            n8n_result = self.n8n_client.create_workflow(workflow_data)
            
            if n8n_result['status'] != 'success':
                return {
                    "status": "error", 
                    "stage": "n8n_creation",
                    "message": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤ n8n: {n8n_result['message']}",
                    "generated_workflow": workflow_data
                }
            
            workflow_id = n8n_result['id']
            workflow_url = n8n_result['url']
            
            print(f"‚úÖ Workflow —Å–æ–∑–¥–∞–Ω –≤ n8n!")
            print(f"üÜî ID: {workflow_id}")
            print(f"üîó URL: {workflow_url}")
            
            # –≠–¢–ê–ü 3: –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            activation_result = None
            if params.get('auto_activate', False):
                print("\n3Ô∏è‚É£ –ê–∫—Ç–∏–≤–∞—Ü–∏—è workflow...")
                activation_result = self.n8n_client.activate_workflow(workflow_id)
                
                if activation_result['status'] == 'success':
                    print("‚úÖ Workflow –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
                else:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π: {activation_result['message']}")
            
            # –≠–¢–ê–ü 4: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            final_result = {
                "status": "success",
                "timestamp": datetime.now().isoformat(),
                "description": description,
                "workflow": {
                    "id": workflow_id,
                    "name": workflow_data['name'],
                    "url": workflow_url,
                    "nodes_count": len(workflow_data['nodes']),
                    "connections_count": len(workflow_data['connections']),
                    "active": activation_result['status'] == 'success' if activation_result else False
                },
                "generated_data": workflow_data,
                "claude_response": claude_result.get('claude_response', ''),
                "n8n_response": n8n_result,
                "activation_result": activation_result
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._save_result(final_result)
            
            print(f"\nüéâ WORKFLOW –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!")
            print(f"üìã –î–µ—Ç–∞–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ results/")
            
            return final_result
            
        except Exception as e:
            error_result = {
                "status": "error",
                "stage": "unexpected_error", 
                "message": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
                "timestamp": datetime.now().isoformat()
            }
            
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
            return error_result
    
    def _save_result(self, result: Dict) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è workflow"""
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_dir = "/Users/hdv_1987/Desktop/Projects/N8N-Agent/results"
        os.makedirs(results_dir, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        workflow_name = result.get('workflow', {}).get('name', 'Unknown')
        safe_name = "".join(c for c in workflow_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
        filename = f"{timestamp}_{safe_name.replace(' ', '_')}.json"
        
        filepath = os.path.join(results_dir, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
    
    def get_available_nodes(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö nodes"""
        
        return {
            "total_nodes": len(self.knowledge_base.nodes),
            "categories": self.knowledge_base.categories,
            "nodes": {
                name: {
                    "display_name": info['display_name'],
                    "description": info['description'],
                    "category": info['category']
                }
                for name, info in self.knowledge_base.nodes.items()
            }
        }
    
    def suggest_workflow_pattern(self, description: str) -> Optional[Dict]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ workflow"""
        return self.knowledge_base.suggest_workflow_pattern(description)
    
    def validate_description(self, description: str) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞"""
        
        if not description or len(description.strip()) < 10:
            return {
                "valid": False,
                "message": "–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤."
            }
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        keywords = ['–ø–æ–ª—É—á–∞—Ç—å', '–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å', '—Å–æ–∑–¥–∞–≤–∞—Ç—å', '–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å', '–∫–æ–≥–¥–∞', '–µ—Å–ª–∏']
        has_keywords = any(keyword in description.lower() for keyword in keywords)
        
        if not has_keywords:
            return {
                "valid": True,
                "message": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö.",
                "suggestions": [
                    "–£–∫–∞–∂–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä (–∫–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å)",
                    "–û–ø–∏—à–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è (—á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å)",
                    "–£—Ç–æ—á–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ)"
                ]
            }
        
        return {
            "valid": True,
            "message": "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è workflow"
        }

def main():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Main Service"""
    
    print("üöÄ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï N8N MAIN SERVICE")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Claude API –∫–ª—é—á–∞
    claude_api_key = os.getenv('CLAUDE_API_KEY')
    use_mock = not claude_api_key or claude_api_key == 'your_claude_api_key_here'
    
    if use_mock:
        print("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω Claude API –∫–ª—é—á, –∏—Å–ø–æ–ª—å–∑—É–µ–º Mock —Ä–µ–∂–∏–º")
    else:
        print("‚úÖ Claude API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π Claude")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    service = N8NMainService(use_mock_claude=use_mock)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    test_examples = [
        {
            "description": "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ webhook –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏–∏",
            "params": {"complexity": "–ü—Ä–æ—Å—Ç–∞—è", "auto_activate": False}
        },
        {
            "description": "–ö–∞–∂–¥—ã–π —á–∞—Å –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —á–µ—Ä–µ–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ Google Sheets",
            "params": {"complexity": "–°—Ä–µ–¥–Ω—è—è", "auto_activate": False}
        }
    ]
    
    print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω–æ {len(test_examples)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:")
    for i, example in enumerate(test_examples, 1):
        print(f"{i}. {example['description']}")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä
    choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä (1-{len(test_examples)}) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'custom' –¥–ª—è —Å–≤–æ–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è: ").strip()
    
    if choice == 'custom':
        description = input("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞: ").strip()
        params = {"complexity": "–°—Ä–µ–¥–Ω—è—è", "auto_activate": False}
    elif choice.isdigit() and 1 <= int(choice) <= len(test_examples):
        example = test_examples[int(choice) - 1]
        description = example['description']
        params = example['params']
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä")
        example = test_examples[0]
        description = example['description']
        params = example['params']
    
    # –°–æ–∑–¥–∞–µ–º workflow
    result = service.create_workflow_from_description(description, params)
    
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"–°—Ç–∞—Ç—É—Å: {result['status']}")
    
    if result['status'] == 'success':
        workflow = result['workflow']
        print(f"‚úÖ Workflow —Å–æ–∑–¥–∞–Ω: {workflow['name']}")
        print(f"üîó URL: {workflow['url']}")
        print(f"üîß Nodes: {workflow['nodes_count']}")
        print(f"‚ö° –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if workflow['active'] else '–ù–µ—Ç'}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['message']}")

if __name__ == "__main__":
    main()

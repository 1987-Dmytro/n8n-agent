#!/usr/bin/env python3
"""
üõ†Ô∏è N8N Setup Assistant
–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ n8n –∏ –ø–æ–ª—É—á–µ–Ω–∏—è API –¥–æ—Å—Ç—É–ø–∞
"""

import requests
import json
import time
from typing import Dict, Optional
import webbrowser

class N8NSetupAssistant:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ n8n"""
    
    def __init__(self, base_url: str = "http://localhost:5678"):
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        
    def check_n8n_status(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ n8n"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
            health_response = self.session.get(f"{self.base_url}/healthz")
            
            if health_response.status_code == 200:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                web_response = self.session.get(self.base_url)
                
                return {
                    "status": "success",
                    "health": "ok",
                    "web_accessible": web_response.status_code == 200,
                    "url": self.base_url,
                    "ready_for_setup": True
                }
            else:
                return {
                    "status": "error",
                    "message": f"n8n –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health_response.status_code}"
                }
                
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
            }
    
    def open_n8n_in_browser(self) -> Dict:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ n8n –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        try:
            print(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º n8n –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {self.base_url}")
            webbrowser.open(self.base_url)
            
            return {
                "status": "success",
                "message": "n8n –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
                "url": self.base_url
            }
            
        except Exception as e:
            return {
                "status": "error",
                "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä: {str(e)}"
            }
    
    def check_if_user_exists(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            response = self.session.get(f"{self.base_url}/rest/settings")
            
            if response.status_code == 200:
                settings = response.json()
                data = settings.get('data', {})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ user management
                user_mgmt = data.get('userManagement', {})
                show_setup = user_mgmt.get('showSetupOnFirstLoad', True)
                
                return {
                    "status": "success",
                    "needs_setup": show_setup,
                    "user_management_enabled": bool(user_mgmt),
                    "settings": user_mgmt
                }
            else:
                return {
                    "status": "error",
                    "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {response.status_code}"
                }
                
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}"
            }
    
    def test_api_access_methods(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ API"""
        results = {}
        
        # 1. –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ /rest/workflows –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        try:
            response = self.session.get(f"{self.base_url}/rest/workflows")
            results["rest_workflows_no_auth"] = {
                "status_code": response.status_code,
                "accessible": response.status_code == 200,
                "response_sample": response.text[:100] if response.text else "empty"
            }
        except Exception as e:
            results["rest_workflows_no_auth"] = {
                "error": str(e)
            }
        
        # 2. –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ /api/v1 (public API)
        try:
            response = self.session.get(f"{self.base_url}/api/v1/workflows")
            results["public_api_workflows"] = {
                "status_code": response.status_code,
                "accessible": response.status_code == 200,
                "response_sample": response.text[:100] if response.text else "empty"
            }
        except Exception as e:
            results["public_api_workflows"] = {
                "error": str(e)
            }
        
        # 3. –¢–µ—Å—Ç node-types endpoint
        try:
            response = self.session.get(f"{self.base_url}/types/nodes.json")
            results["node_types"] = {
                "status_code": response.status_code,
                "accessible": response.status_code == 200,
                "response_sample": response.text[:100] if response.text else "empty"
            }
        except Exception as e:
            results["node_types"] = {
                "error": str(e)
            }
        
        return {
            "status": "success",
            "test_results": results,
            "summary": self._analyze_api_access(results)
        }
    
    def _analyze_api_access(self, results: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"""
        accessible_endpoints = []
        restricted_endpoints = []
        
        for endpoint, result in results.items():
            if result.get('accessible', False):
                accessible_endpoints.append(endpoint)
            else:
                restricted_endpoints.append(endpoint)
        
        return {
            "accessible_count": len(accessible_endpoints),
            "restricted_count": len(restricted_endpoints),
            "accessible_endpoints": accessible_endpoints,
            "restricted_endpoints": restricted_endpoints,
            "api_access_level": "full" if len(accessible_endpoints) > 1 else "limited" if len(accessible_endpoints) == 1 else "none"
        }
    
    def generate_setup_guide(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        status = self.check_n8n_status()
        user_check = self.check_if_user_exists()
        api_test = self.test_api_access_methods()
        
        guide = f"""
# üõ†Ô∏è –ü–û–®–ê–ì–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê N8N –¥–ª—è N8N-Agent

**–í—Ä–µ–º—è:** {time.strftime('%Y-%m-%d %H:%M:%S')}
**URL:** {self.base_url}

## üìä –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–°

### N8N –°—Ç–∞—Ç—É—Å:
- **–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:** {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if status.get('status') == 'success' else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
- **Health Check:** {'‚úÖ OK' if status.get('health') == 'ok' else '‚ùå –ü—Ä–æ–±–ª–µ–º–∞'}
- **–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:** {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if status.get('web_accessible') else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}

### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
- **–¢—Ä–µ–±—É–µ—Ç—Å—è setup:** {'‚úÖ –î–∞' if user_check.get('needs_setup') else '‚ùå –ù–µ—Ç'}
- **User Management:** {'‚úÖ –í–∫–ª—é—á–µ–Ω' if user_check.get('user_management_enabled') else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}

### API –î–æ—Å—Ç—É–ø:
- **–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:** {api_test.get('summary', {}).get('api_access_level', 'unknown')}
- **–î–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints:** {api_test.get('summary', {}).get('accessible_count', 0)}
- **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö endpoints:** {api_test.get('summary', {}).get('restricted_count', 0)}

---

## üöÄ –ü–û–®–ê–ì–û–í–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò

### –®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç–∏–µ n8n –≤ –±—Ä–∞—É–∑–µ—Ä–µ
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: **{self.base_url}**
2. –ï—Å–ª–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–∞ - –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É

### –®–∞–≥ 2: –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
"""
        
        if user_check.get('needs_setup'):
            guide += """
**–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ n8n - –Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:**

1. üë§ **–°–æ–∑–¥–∞–π—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞:**
   - Email: `admin@n8n-agent.local`
   - –ü–∞—Ä–æ–ª—å: `N8NAgent2025!`
   - –ò–º—è: `N8N Agent Admin`

2. üè¢ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞:**
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `Personal`
   - –¶–µ–ª—å: `Automation & Integration`

3. ‚úÖ **–ó–∞–≤–µ—Ä—à–∏—Ç–µ setup**

"""
        else:
            guide += """
**n8n —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:**
- –í–æ–π–¥–∏—Ç–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
- –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è N8N-Agent

"""
        
        guide += f"""
### –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ API –¥–æ—Å—Ç—É–ø–∞

#### –ú–µ—Ç–æ–¥ 1: API –ö–ª—é—á (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
1. –í n8n –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ **Settings** ‚Üí **API**
2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π **API Key**
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ —Ñ–∞–π–ª .env:
   ```
   N8N_API_KEY=your_api_key_here
   ```

#### –ú–µ—Ç–æ–¥ 2: Email/Password –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ API
2. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª:
   ```
   N8N_EMAIL=admin@n8n-agent.local
   N8N_PASSWORD=your_secure_password_here
   ```

### –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è API –¥–æ—Å—Ç—É–ø–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:
```bash
cd /Users/hdv_1987/Desktop/Projects/N8N-Agent
python3 core/n8n_enhanced_api_client.py
```

---

## üîß TROUBLESHOOTING

### –ü—Ä–æ–±–ª–µ–º–∞: "Secure Cookie" –æ—à–∏–±–∫–∞
**–†–µ—à–µ–Ω–∏–µ:** –£–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é `N8N_SECURE_COOKIE=false`

### –ü—Ä–æ–±–ª–µ–º–∞: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 401 Unauthorized
**–†–µ—à–µ–Ω–∏–µ:** 
1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
2. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ email/password

### –ü—Ä–æ–±–ª–µ–º–∞: 404 –Ω–∞ /rest/node-types
**–†–µ—à–µ–Ω–∏–µ:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints:
- `/types/nodes.json`
- `/rest/node-types` (–ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)

---

## üìã –ß–ï–ö–õ–ò–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò

- [ ] n8n –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
- [ ] –ü—Ä–æ–π–¥–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –≤—Ö–æ–¥
- [ ] –ü–æ–ª—É—á–µ–Ω API –∫–ª—é—á –ò–õ–ò –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ email –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è  
- [ ] –û–±–Ω–æ–≤–ª–µ–Ω .env —Ñ–∞–π–ª
- [ ] API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
- [ ] –î–æ—Å—Ç—É–ø –∫ workflow –∏ node-types —Ä–∞–±–æ—Ç–∞–µ—Ç

**–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤ - –≥–æ—Ç–æ–≤—ã –∫ –§–ê–ó–ï 2! üöÄ**

---

*–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ N8N Setup Assistant v1.0*
"""
        
        return guide

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Setup Assistant"""
    
    print("üõ†Ô∏è –ó–∞–ø—É—Å–∫ N8N Setup Assistant...")
    
    assistant = N8NSetupAssistant()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    status = assistant.check_n8n_status()
    
    if status['status'] == 'success':
        print("‚úÖ n8n —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        assistant.open_n8n_in_browser()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
        guide = assistant.generate_setup_guide()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
        guide_path = "/Users/hdv_1987/Desktop/Projects/N8N-Agent/N8N_SETUP_GUIDE.md"
        with open(guide_path, 'w', encoding='utf-8') as f:
            f.write(guide)
        
        print(f"\nüìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {guide_path}")
        print("\n" + guide)
        
    else:
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å n8n: {status['message']}")
        print("üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å n8n –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")

if __name__ == "__main__":
    main()

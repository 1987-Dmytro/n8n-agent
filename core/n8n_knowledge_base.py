#!/usr/bin/env python3
"""
üìö N8N Knowledge Base
–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π n8n nodes –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ workflow
"""

from typing import Dict, List, Optional, Any
import yaml
import json

class N8NKnowledgeBase:
    """–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π n8n nodes –∏ –∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        self.nodes = self._initialize_nodes()
        self.categories = self._categorize_nodes()
        self.workflow_patterns = self._initialize_patterns()
    
    def _initialize_nodes(self) -> Dict[str, Dict]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π nodes"""
        return {
            # === TRIGGER NODES ===
            "n8n-nodes-base.webhook": {
                "category": "trigger",
                "display_name": "Webhook",
                "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ workflow",
                "parameters": {
                    "httpMethod": {"type": "options", "options": ["GET", "POST", "PUT", "DELETE", "PATCH"]},
                    "path": {"type": "string", "description": "URL path –¥–ª—è webhook"},
                    "authentication": {"type": "options", "options": ["none", "basicAuth", "headerAuth"]}
                },
                "outputs": ["main"],
                "use_cases": [
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º",
                    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç—Ä–µ—Ç—å–∏–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏",
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–æ–±—ã—Ç–∏—è—Ö"
                ],
                "example_config": {
                    "httpMethod": "POST",
                    "path": "webhook-data",
                    "authentication": "none"
                }
            },
            
            "n8n-nodes-base.schedule": {
                "category": "trigger", 
                "display_name": "Schedule Trigger",
                "description": "–ó–∞–ø—É—Å–∫ workflow –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é",
                "parameters": {
                    "rule": {"type": "options", "options": ["interval", "cron"]},
                    "interval": {"type": "number", "description": "–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö"},
                    "cronExpression": {"type": "string", "description": "Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"}
                },
                "outputs": ["main"],
                "use_cases": [
                    "–†–µ–≥—É–ª—è—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
                    "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã",
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"
                ]
            },
            
            # === HTTP NODES ===
            "n8n-nodes-base.httpRequest": {
                "category": "regular",
                "display_name": "HTTP Request",
                "description": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API",
                "parameters": {
                    "url": {"type": "string", "required": True},
                    "method": {"type": "options", "options": ["GET", "POST", "PUT", "DELETE", "PATCH"]},
                    "headers": {"type": "fixedCollection", "description": "HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏"},
                    "body": {"type": "json", "description": "–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞"},
                    "authentication": {"type": "options", "options": ["none", "basicAuth", "oAuth2", "apiKey"]}
                },
                "outputs": ["main"],
                "use_cases": [
                    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å REST API",
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤",
                    "–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—ã"
                ],
                "example_config": {
                    "url": "https://api.example.com/data",
                    "method": "GET",
                    "headers": {"Content-Type": "application/json"}
                }
            },
            
            # === GOOGLE SERVICES ===
            "n8n-nodes-base.googleSheets": {
                "category": "regular",
                "display_name": "Google Sheets",
                "description": "–†–∞–±–æ—Ç–∞ —Å Google –¢–∞–±–ª–∏—Ü–∞–º–∏",
                "parameters": {
                    "operation": {"type": "options", "options": ["append", "read", "update", "clear"]},
                    "sheetId": {"type": "string", "required": True},
                    "range": {"type": "string", "description": "–î–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫ (A1:C10)"},
                    "values": {"type": "array", "description": "–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏"}
                },
                "outputs": ["main"],
                "use_cases": [
                    "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—ã",
                    "–ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π",
                    "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤"
                ],
                "connection_required": "googleSheetsOAuth2Api"
            },
            
            "n8n-nodes-base.gmail": {
                "category": "regular",
                "display_name": "Gmail",
                "description": "–û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ email —á–µ—Ä–µ–∑ Gmail",
                "parameters": {
                    "operation": {"type": "options", "options": ["send", "get", "getAll"]},
                    "to": {"type": "string", "description": "Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è"},
                    "subject": {"type": "string", "description": "–¢–µ–º–∞ –ø–∏—Å—å–º–∞"},
                    "message": {"type": "string", "description": "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"},
                    "attachments": {"type": "fixedCollection", "description": "–í–ª–æ–∂–µ–Ω–∏—è"}
                },
                "outputs": ["main"],
                "use_cases": [
                    "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã",
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–π –ø–æ—á—Ç—ã"
                ],
                "connection_required": "gmailOAuth2"
            },
            
            # === COMMUNICATION ===
            "n8n-nodes-base.slack": {
                "category": "regular",
                "display_name": "Slack",
                "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ Slack",
                "parameters": {
                    "operation": {"type": "options", "options": ["postMessage", "update", "get"]},
                    "channel": {"type": "string", "description": "–ö–∞–Ω–∞–ª Slack"},
                    "text": {"type": "string", "description": "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"},
                    "username": {"type": "string", "description": "–ò–º—è –±–æ—Ç–∞"},
                    "attachments": {"type": "fixedCollection", "description": "–í–ª–æ–∂–µ–Ω–∏—è"}
                },
                "outputs": ["main"],
                "use_cases": [
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã",
                    "–ê–ª–µ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã",
                    "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã"
                ],
                "connection_required": "slackApi"
            },
            
            # === DATA PROCESSING ===
            "n8n-nodes-base.set": {
                "category": "regular",
                "display_name": "Set",
                "description": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                "parameters": {
                    "values": {"type": "fixedCollection", "description": "–ü–æ–ª—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"},
                    "options": {"type": "collection", "description": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏"}
                },
                "outputs": ["main"],
                "use_cases": [
                    "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                    "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π",
                    "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
                ],
                "example_config": {
                    "values": {
                        "string": [
                            {"name": "processed_at", "value": "{{ $now }}"},
                            {"name": "status", "value": "completed"}
                        ]
                    }
                }
            },
            
            "n8n-nodes-base.if": {
                "category": "regular",
                "display_name": "IF",
                "description": "–£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞",
                "parameters": {
                    "conditions": {"type": "fixedCollection", "description": "–£—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"},
                    "combineOperation": {"type": "options", "options": ["any", "all"]}
                },
                "outputs": ["main", "fallback"],
                "use_cases": [
                    "–£—Å–ª–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", 
                    "–í–µ—Ç–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏"
                ]
            },
            
            "n8n-nodes-base.switch": {
                "category": "regular",
                "display_name": "Switch",
                "description": "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ",
                "parameters": {
                    "mode": {"type": "options", "options": ["expression", "rules"]},
                    "value": {"type": "string", "description": "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"},
                    "rules": {"type": "fixedCollection", "description": "–ü—Ä–∞–≤–∏–ª–∞ –≤–µ—Ç–≤–ª–µ–Ω–∏—è"}
                },
                "outputs": ["main", "fallback"],
                "use_cases": [
                    "–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                    "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤"
                ]
            },
            
            # === UTILITIES ===
            "n8n-nodes-base.merge": {
                "category": "regular",
                "display_name": "Merge",
                "description": "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
                "parameters": {
                    "mode": {"type": "options", "options": ["append", "merge", "multiplex"]},
                    "joinMode": {"type": "options", "options": ["inner", "left", "outer"]}
                },
                "outputs": ["main"],
                "use_cases": [
                    "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
                    "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤",
                    "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                ]
            },
            
            "n8n-nodes-base.wait": {
                "category": "regular", 
                "display_name": "Wait",
                "description": "–ü–∞—É–∑–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ workflow",
                "parameters": {
                    "amount": {"type": "number", "description": "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"},
                    "unit": {"type": "options", "options": ["seconds", "minutes", "hours", "days"]}
                },
                "outputs": ["main"],
                "use_cases": [
                    "–ó–∞–¥–µ—Ä–∂–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                    "–û–∂–∏–¥–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π",
                    "Throttling –∑–∞–ø—Ä–æ—Å–æ–≤"
                ]
            }
        }
    
    def _categorize_nodes(self) -> Dict[str, List[str]]:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è nodes"""
        categories = {}
        
        for node_name, node_info in self.nodes.items():
            category = node_info['category']
            if category not in categories:
                categories[category] = []
            categories[category].append(node_name)
        
        return categories
    
    def _initialize_patterns(self) -> Dict[str, Dict]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ workflow"""
        return {
            "webhook_to_action": {
                "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ webhook –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è",
                "nodes": ["n8n-nodes-base.webhook", "n8n-nodes-base.set"],
                "connections": [{"from": 0, "to": 1}],
                "use_case": "–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
            },
            
            "scheduled_data_sync": {
                "description": "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                "nodes": ["n8n-nodes-base.schedule", "n8n-nodes-base.httpRequest", "n8n-nodes-base.googleSheets"],
                "connections": [{"from": 0, "to": 1}, {"from": 1, "to": 2}],
                "use_case": "–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
            },
            
            "conditional_notification": {
                "description": "–£—Å–ª–æ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                "nodes": ["n8n-nodes-base.webhook", "n8n-nodes-base.if", "n8n-nodes-base.slack", "n8n-nodes-base.gmail"],
                "connections": [
                    {"from": 0, "to": 1},
                    {"from": 1, "to": 2, "output": "main"},
                    {"from": 1, "to": 3, "output": "fallback"}
                ],
                "use_case": "–†–∞–∑–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π"
            },
            
            "api_to_multiple_destinations": {
                "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç",
                "nodes": ["n8n-nodes-base.httpRequest", "n8n-nodes-base.set", "n8n-nodes-base.googleSheets", "n8n-nodes-base.slack"],
                "connections": [
                    {"from": 0, "to": 1},
                    {"from": 1, "to": 2},
                    {"from": 1, "to": 3}
                ],
                "use_case": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∏—Å—Ç–µ–º–∞–º"
            }
        }
    
    def get_node_info(self, node_name: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ node"""
        return self.nodes.get(node_name)
    
    def get_nodes_by_category(self, category: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ nodes –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return self.categories.get(category, [])
    
    def find_nodes_by_use_case(self, use_case_keywords: List[str]) -> List[str]:
        """–ü–æ–∏—Å–∫ nodes –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º use case"""
        matching_nodes = []
        
        for node_name, node_info in self.nodes.items():
            use_cases = node_info.get('use_cases', [])
            use_cases_text = ' '.join(use_cases).lower()
            
            if any(keyword.lower() in use_cases_text for keyword in use_case_keywords):
                matching_nodes.append(node_name)
        
        return matching_nodes
    
    def suggest_workflow_pattern(self, description: str) -> Optional[Dict]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ workflow –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
        description_lower = description.lower()
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        if any(word in description_lower for word in ['webhook', '–ø–æ–ª—É—á–∞—Ç—å', '–ø—Ä–∏–Ω–∏–º–∞—Ç—å']):
            if any(word in description_lower for word in ['–µ—Å–ª–∏', '—É—Å–ª–æ–≤–∏–µ', '–∫–æ–≥–¥–∞']):
                return self.workflow_patterns.get('conditional_notification')
            else:
                return self.workflow_patterns.get('webhook_to_action')
        
        elif any(word in description_lower for word in ['–∫–∞–∂–¥—ã–π', '–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏', '—Ä–µ–≥—É–ª—è—Ä–Ω–æ', '—á–∞—Å']):
            return self.workflow_patterns.get('scheduled_data_sync')
        
        elif any(word in description_lower for word in ['api', '–¥–∞–Ω–Ω—ã–µ']) and any(word in description_lower for word in ['–Ω–µ—Å–∫–æ–ª—å–∫–æ', '—Ä–∞–∑–Ω—ã–µ']):
            return self.workflow_patterns.get('api_to_multiple_destinations')
        
        return None
    
    def generate_node_config(self, node_name: str, custom_params: Dict = None) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ node"""
        node_info = self.get_node_info(node_name)
        if not node_info:
            return {}
        
        config = {
            "id": "temp_id",
            "name": node_info['display_name'],
            "type": node_name,
            "typeVersion": 1,
            "position": [0, 0],
            "parameters": {}
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º example_config –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'example_config' in node_info:
            config['parameters'].update(node_info['example_config'])
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º custom –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        if custom_params:
            config['parameters'].update(custom_params)
        
        return config
    
    def export_to_yaml(self, file_path: str):
        """–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ YAML"""
        export_data = {
            "nodes": self.nodes,
            "categories": self.categories,
            "workflow_patterns": self.workflow_patterns
        }
        
        with open(file_path, 'w', encoding='utf-8') as f:
            yaml.dump(export_data, f, default_flow_style=False, allow_unicode=True)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    kb = N8NKnowledgeBase()
    
    print("üìö N8N Knowledge Base –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    print(f"üîß Nodes: {len(kb.nodes)}")
    print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {list(kb.categories.keys())}")
    print(f"üéØ –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {len(kb.workflow_patterns)}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ YAML
    yaml_path = "/Users/hdv_1987/Desktop/Projects/N8N-Agent/config/n8n_nodes.yaml"
    kb.export_to_yaml(yaml_path)
    print(f"üíæ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {yaml_path}")
    
    # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("\nüîç –ü–†–ò–ú–ï–†–´ –ü–û–ò–°–ö–ê:")
    
    # –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    trigger_nodes = kb.get_nodes_by_category('trigger')
    print(f"Trigger nodes: {[kb.nodes[n]['display_name'] for n in trigger_nodes]}")
    
    # –ü–æ–∏—Å–∫ –ø–æ use case
    email_nodes = kb.find_nodes_by_use_case(['email', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'])
    print(f"Email nodes: {[kb.nodes[n]['display_name'] for n in email_nodes]}")
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    pattern = kb.suggest_workflow_pattern("–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ webhook –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack")
    if pattern:
        print(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern['description']}")

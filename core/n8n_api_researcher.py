#!/usr/bin/env python3
"""
üî¨ N8N API Research Tool
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è n8n API –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã workflow
"""

import requests
import json
from typing import Dict, List, Optional
import os
from datetime import datetime

class N8NAPIResearcher:
    """–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å n8n API"""
    
    def __init__(self, base_url: str = "http://localhost:5678"):
        self.base_url = base_url
        self.session = requests.Session()
        self.auth_user = "admin"
        self.auth_password = "password"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        self.session.auth = (self.auth_user, self.auth_password)
        self.session.headers.update({
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        })
    
    def check_connection(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ n8n"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
            response = self.session.get(f"{self.base_url}/healthz")
            
            if response.status_code == 200:
                return {
                    "status": "success", 
                    "message": "n8n –¥–æ—Å—Ç—É–ø–µ–Ω",
                    "url": self.base_url
                }
            else:
                return {
                    "status": "error",
                    "message": f"HTTP {response.status_code}: {response.text}"
                }
                
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
            }
    
    def explore_api_endpoints(self) -> Dict:
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API endpoints"""
        endpoints_to_test = [
            "/rest/workflows",
            "/rest/executions", 
            "/rest/nodes",
            "/rest/credentials",
            "/rest/active",
            "/healthz",
            "/rest/settings",
            "/rest/login"
        ]
        
        results = {}
        
        for endpoint in endpoints_to_test:
            try:
                response = self.session.get(f"{self.base_url}{endpoint}")
                results[endpoint] = {
                    "status_code": response.status_code,
                    "accessible": response.status_code < 400,
                    "response_size": len(response.text),
                    "content_type": response.headers.get('Content-Type', 'unknown')
                }
                
                # –ï—Å–ª–∏ endpoint –¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω–∏–º sample –¥–∞–Ω–Ω—ã—Ö
                if response.status_code == 200:
                    try:
                        data = response.json()
                        results[endpoint]["sample_data"] = str(data)[:200] + "..." if len(str(data)) > 200 else str(data)
                    except:
                        results[endpoint]["sample_data"] = response.text[:200] + "..." if len(response.text) > 200 else response.text
                        
            except Exception as e:
                results[endpoint] = {
                    "status": "error",
                    "message": str(e)
                }
        
        return results
    
    def research_workflow_structure(self) -> Dict:
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã workflow n8n"""
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ workflow
        try:
            response = self.session.get(f"{self.base_url}/rest/workflows")
            
            if response.status_code == 200:
                workflows = response.json()
                
                result = {
                    "existing_workflows_count": len(workflows.get('data', [])),
                    "workflow_structure_sample": None,
                    "status": "success"
                }
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å workflow, –∏–∑—É—á–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if workflows.get('data') and len(workflows['data']) > 0:
                    sample_workflow = workflows['data'][0]
                    result["workflow_structure_sample"] = sample_workflow
                
                return result
                
            else:
                return {
                    "status": "error", 
                    "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å workflow: {response.status_code}",
                    "response": response.text
                }
                
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è workflow: {str(e)}"
            }
    
    def test_workflow_creation(self) -> Dict:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ workflow"""
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–µ–π—à–∏–π workflow –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        simple_workflow = {
            "name": "Test API Workflow",
            "active": False,
            "nodes": [
                {
                    "id": "1",
                    "name": "Start",
                    "type": "n8n-nodes-base.start",
                    "typeVersion": 1,
                    "position": [100, 200],
                    "parameters": {}
                }
            ],
            "connections": {},
            "settings": {},
            "staticData": {}
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/rest/workflows",
                json=simple_workflow
            )
            
            if response.status_code in [200, 201]:
                created_workflow = response.json()
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π workflow
                if 'id' in created_workflow:
                    delete_response = self.session.delete(
                        f"{self.base_url}/rest/workflows/{created_workflow['id']}"
                    )
                
                return {
                    "status": "success",
                    "message": "–°–æ–∑–¥–∞–Ω–∏–µ workflow —Ä–∞–±–æ—Ç–∞–µ—Ç!",
                    "created_workflow_id": created_workflow.get('id'),
                    "api_writable": True
                }
            else:
                return {
                    "status": "error",
                    "message": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è workflow: {response.status_code}",
                    "response": response.text,
                    "api_writable": False
                }
                
        except Exception as e:
            return {
                "status": "error", 
                "message": f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è: {str(e)}",
                "api_writable": False
            }
    
    def research_available_nodes(self) -> Dict:
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö nodes –≤ n8n"""
        try:
            response = self.session.get(f"{self.base_url}/rest/node-types")
            
            if response.status_code == 200:
                nodes_data = response.json()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º nodes
                if isinstance(nodes_data, list):
                    nodes_list = nodes_data
                elif isinstance(nodes_data, dict) and 'data' in nodes_data:
                    nodes_list = nodes_data['data']
                else:
                    nodes_list = []
                
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º nodes
                categories = {}
                total_nodes = len(nodes_list)
                
                for node in nodes_list[:50]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 50 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    if isinstance(node, dict):
                        node_name = node.get('name', 'unknown')
                        node_category = node_name.split('.')[0] if '.' in node_name else 'other'
                        
                        if node_category not in categories:
                            categories[node_category] = []
                        categories[node_category].append(node_name)
                
                return {
                    "status": "success",
                    "total_nodes": total_nodes,
                    "categories": categories,
                    "sample_nodes": [node.get('name') for node in nodes_list[:10] if isinstance(node, dict)]
                }
            else:
                return {
                    "status": "error",
                    "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å nodes: {response.status_code}",
                    "response": response.text
                }
                
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è nodes: {str(e)}"
            }
    
    def generate_research_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ–± –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏"""
        
        print("üî¨ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ n8n API...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        connection_result = self.check_connection()
        
        # 2. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ endpoints
        print("2Ô∏è‚É£ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ API endpoints...")
        endpoints_result = self.explore_api_endpoints()
        
        # 3. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ workflow —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        print("3Ô∏è‚É£ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã workflow...")
        workflow_result = self.research_workflow_structure()
        
        # 4. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è workflow
        print("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è workflow...")
        creation_result = self.test_workflow_creation()
        
        # 5. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ nodes
        print("5Ô∏è‚É£ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö nodes...")
        nodes_result = self.research_available_nodes()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = f"""
# üî¨ –û–¢–ß–ï–¢ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø N8N API
**–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**URL:** {self.base_url}

## 1Ô∏è‚É£ –°–¢–ê–¢–£–° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
- **–°—Ç–∞—Ç—É—Å:** {connection_result['status']}
- **–°–æ–æ–±—â–µ–Ω–∏–µ:** {connection_result['message']}

## 2Ô∏è‚É£ –î–û–°–¢–£–ü–ù–´–ï API ENDPOINTS
"""
        
        for endpoint, result in endpoints_result.items():
            status_icon = "‚úÖ" if result.get('accessible', False) else "‚ùå"
            report += f"- {status_icon} `{endpoint}` - HTTP {result.get('status_code', 'N/A')}\n"
        
        report += f"""
## 3Ô∏è‚É£ –°–¢–†–£–ö–¢–£–†–ê WORKFLOW
- **–°—Ç–∞—Ç—É—Å:** {workflow_result['status']}
- **–°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö workflow:** {workflow_result.get('existing_workflows_count', 0)}

## 4Ô∏è‚É£ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø WORKFLOW
- **–°—Ç–∞—Ç—É—Å:** {creation_result['status']}
- **API –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏:** {'‚úÖ' if creation_result.get('api_writable', False) else '‚ùå'}
- **–°–æ–æ–±—â–µ–Ω–∏–µ:** {creation_result['message']}

## 5Ô∏è‚É£ –î–û–°–¢–£–ü–ù–´–ï NODES
"""
        
        if nodes_result['status'] == 'success':
            report += f"- **–í—Å–µ–≥–æ nodes:** {nodes_result['total_nodes']}\n"
            report += f"- **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:** {', '.join(nodes_result['categories'].keys())}\n"
            report += f"- **–ü—Ä–∏–º–µ—Ä—ã nodes:** {', '.join(nodes_result['sample_nodes'])}\n"
        else:
            report += f"- **–û—à–∏–±–∫–∞:** {nodes_result['message']}\n"
        
        report += f"""
## üéØ –í–´–í–û–î–´ –î–õ–Ø N8N-AGENT

### ‚úÖ –ß–¢–û –†–ê–ë–û–¢–ê–ï–¢:
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ n8n API
- –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- –ë–∞–∑–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è

### üîß –ß–¢–û –ù–£–ñ–ù–û –ù–ê–°–¢–†–û–ò–¢–¨:
- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è workflow
- –ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã nodes
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ workflow

### üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
2. –ò–∑—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∞–ª—å–Ω—ã—Ö workflow
3. –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π n8n nodes
4. –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å n8n_api_client.py

---
*–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ N8N API Research Tool v1.0*
"""
        
        return report

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ N8N API Research Tool...")
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è
    researcher = N8NAPIResearcher()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = researcher.generate_research_report()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_path = "/Users/hdv_1987/Desktop/Projects/N8N-Agent/n8n_api_research_report.md"
    
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"\nüìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    print("\n" + report)

if __name__ == "__main__":
    main()

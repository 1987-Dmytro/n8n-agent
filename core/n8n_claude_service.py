#!/usr/bin/env python3
"""
üß† N8N Claude Service
AI-—Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ n8n workflow –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Claude Service —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è n8n
"""

import os
import json
from typing import Dict, List, Optional, Any
import anthropic
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from n8n_knowledge_base import N8NKnowledgeBase

class N8NClaudeService:
    """Claude AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ n8n workflow"""
    
    def __init__(self):
        self.client = anthropic.Anthropic(
            api_key=os.getenv('CLAUDE_API_KEY', 'your_claude_api_key_here')
        )
        self.model = "claude-sonnet-4-20250514"
        self.knowledge_base = N8NKnowledgeBase()
        
    def generate_workflow(self, description: str, params: Dict = None) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è n8n workflow –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
        
        if params is None:
            params = {}
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Claude
        context = self._create_context(description, params)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = self._create_n8n_prompt(description, context)
        
        try:
            # –ó–∞–ø—Ä–æ—Å –∫ Claude
            response = self.client.messages.create(
                model=self.model,
                max_tokens=4000,
                messages=[{"role": "user", "content": prompt}]
            )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            workflow_json = self._parse_claude_response(response.content[0].text)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º workflow
            validated_workflow = self._validate_workflow(workflow_json)
            
            return {
                "status": "success",
                "workflow": validated_workflow,
                "description": description,
                "params": params,
                "claude_response": response.content[0].text[:500] + "..." if len(response.content[0].text) > 500 else response.content[0].text
            }
            
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ workflow: {str(e)}",
                "description": description
            }
    
    def _create_context(self, description: str, params: Dict) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        suggested_pattern = self.knowledge_base.suggest_workflow_pattern(description)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        complexity = params.get('complexity', '–°—Ä–µ–¥–Ω—è—è')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ nodes
        node_categories = self._analyze_required_nodes(description)
        
        return {
            "complexity": complexity,
            "suggested_pattern": suggested_pattern,
            "node_categories": node_categories,
            "available_nodes": list(self.knowledge_base.nodes.keys()),
            "workflow_patterns": self.knowledge_base.workflow_patterns
        }
    
    def _analyze_required_nodes(self, description: str) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∏–ø–æ–≤ nodes –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
        description_lower = description.lower()
        required_categories = []
        
        # –¢—Ä–∏–≥–≥–µ—Ä—ã
        if any(word in description_lower for word in ['webhook', '–ø–æ–ª—É—á–∞—Ç—å', '–ø—Ä–∏–Ω–∏–º–∞—Ç—å', '–∑–∞–ø—Ä–æ—Å']):
            required_categories.append('webhook')
        
        if any(word in description_lower for word in ['–∫–∞–∂–¥—ã–π', '–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏', '—á–∞—Å', '–¥–µ–Ω—å', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ']):
            required_categories.append('schedule')
        
        # HTTP –∑–∞–ø—Ä–æ—Å—ã
        if any(word in description_lower for word in ['api', '–∑–∞–ø—Ä–æ—Å', '–¥–∞–Ω–Ω—ã–µ', '–ø–æ–ª—É—á–∏—Ç—å']):
            required_categories.append('http')
        
        # Google —Å–µ—Ä–≤–∏—Å—ã
        if any(word in description_lower for word in ['google', 'sheets', '—Ç–∞–±–ª–∏—Ü–∞', 'gmail', 'email']):
            required_categories.append('google')
        
        # –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        if any(word in description_lower for word in ['slack', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', '—Å–æ–æ–±—â–µ–Ω–∏–µ']):
            required_categories.append('communication')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if any(word in description_lower for word in ['–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å', '–∏–∑–º–µ–Ω–∏—Ç—å', '–¥–æ–±–∞–≤–∏—Ç—å', '—É—Å–ª–æ–≤–∏–µ']):
            required_categories.append('processing')
        
        return required_categories
    
    def _create_n8n_prompt(self, description: str, context: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Claude —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è n8n"""
        
        suggested_pattern = context.get('suggested_pattern')
        pattern_info = ""
        if suggested_pattern:
            pattern_info = f"""
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω workflow: {suggested_pattern['description']}
Nodes –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ: {suggested_pattern['nodes']}
Connections: {suggested_pattern['connections']}
"""
        
        available_nodes_info = "\n".join([
            f"- {node}: {self.knowledge_base.nodes[node]['display_name']} - {self.knowledge_base.nodes[node]['description']}"
            for node in context['available_nodes'][:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        ])
        
        prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ n8n - –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ workflow. –°–æ–∑–¥–∞–π –†–ê–ë–û–ß–ò–ô n8n workflow –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞.

–û–ü–ò–°–ê–ù–ò–ï –ü–†–û–¶–ï–°–°–ê:
{description}

–ö–û–ù–¢–ï–ö–°–¢:
- –°–ª–æ–∂–Ω–æ—Å—Ç—å: {context['complexity']}
- –¢—Ä–µ–±—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ nodes: {context['node_categories']}
{pattern_info}

–î–û–°–¢–£–ü–ù–´–ï N8N NODES (–∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —ç—Ç–∏):
{available_nodes_info}

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ n8n node types –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
2. –°–æ–∑–¥–∞–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É n8n workflow JSON
3. –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ connections –º–µ–∂–¥—É nodes
4. –î–æ–±–∞–≤—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ node
5. –í–∫–ª—é—á–∏ position –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
6. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ nodes

–°–¢–†–£–ö–¢–£–†–ê WORKFLOW:
```json
{{
  "name": "–ù–∞–∑–≤–∞–Ω–∏–µ workflow",
  "active": false,
  "nodes": [
    {{
      "id": "1",
      "name": "Node Name",
      "type": "n8n-nodes-base.nodetype",
      "typeVersion": 1,
      "position": [100, 200],
      "parameters": {{
        // —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã node
      }}
    }}
  ],
  "connections": {{
    "Node Name": {{
      "main": [[{{
        "node": "Next Node Name",
        "type": "main",
        "index": 0
      }}]]
    }}
  }},
  "settings": {{}},
  "staticData": {{}}
}}
```

–í–ê–ñ–ù–û:
- –ö–∞–∂–¥—ã–π node –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
- Connections –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∏–º–µ–Ω–∞ nodes, –Ω–µ id
- Position –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–æ–≥–∏—á–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã (100px –º–µ–∂–¥—É nodes)
- Parameters –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º n8n nodes

–°–æ–∑–¥–∞–π workflow –∫–æ—Ç–æ—Ä—ã–π –¢–û–ß–ù–û –ë–£–î–ï–¢ –†–ê–ë–û–¢–ê–¢–¨ –≤ n8n!
"""
        
        return prompt
    
    def _parse_claude_response(self, response_text: str) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Claude –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON workflow"""
        
        # –ò—â–µ–º JSON –±–ª–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
        start_markers = ['```json', '```', '{']
        end_markers = ['```', '}']
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ JSON
        start_pos = -1
        for marker in start_markers:
            pos = response_text.find(marker)
            if pos != -1:
                start_pos = pos + len(marker)
                break
        
        if start_pos == -1:
            # –ï—Å–ª–∏ –Ω–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤, –∏—â–µ–º –ø–µ—Ä–≤—É—é –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
            start_pos = response_text.find('{')
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü JSON
        end_pos = len(response_text)
        if '```' in response_text[start_pos:]:
            end_pos = response_text.find('```', start_pos)
        else:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
            end_pos = response_text.rfind('}') + 1
        
        if start_pos == -1 or end_pos == -1:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ Claude")
        
        json_text = response_text[start_pos:end_pos].strip()
        
        # –û—á–∏—â–∞–µ–º –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        if json_text.startswith('json\n'):
            json_text = json_text[5:]
        
        try:
            workflow_json = json.loads(json_text)
            return workflow_json
        except json.JSONDecodeError as e:
            raise ValueError(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –æ—Ç Claude: {str(e)}\nJSON: {json_text[:200]}...")
    
    def _validate_workflow(self, workflow: Dict) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ workflow"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['name', 'nodes', 'connections']
        for field in required_fields:
            if field not in workflow:
                workflow[field] = self._get_default_value(field)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º nodes
        if not isinstance(workflow['nodes'], list):
            workflow['nodes'] = []
        
        validated_nodes = []
        for i, node in enumerate(workflow['nodes']):
            validated_node = self._validate_node(node, i)
            validated_nodes.append(validated_node)
        
        workflow['nodes'] = validated_nodes
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º connections
        workflow['connections'] = self._validate_connections(
            workflow.get('connections', {}), 
            [node['name'] for node in validated_nodes]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        workflow.setdefault('active', False)
        workflow.setdefault('settings', {})
        workflow.setdefault('staticData', {})
        
        return workflow
    
    def _validate_node(self, node: Dict, index: int) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ node"""
        
        validated_node = {
            "id": node.get('id', str(index + 1)),
            "name": node.get('name', f"Node {index + 1}"),
            "type": node.get('type', 'n8n-nodes-base.set'),
            "typeVersion": node.get('typeVersion', 1),
            "position": node.get('position', [100 + index * 200, 200]),
            "parameters": node.get('parameters', {})
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ node type —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        if validated_node['type'] not in self.knowledge_base.nodes:
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π node
            validated_node['type'] = 'n8n-nodes-base.set'
            validated_node['name'] = f"Set {index + 1}"
        
        return validated_node
    
    def _validate_connections(self, connections: Dict, node_names: List[str]) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è connections –º–µ–∂–¥—É nodes"""
        
        validated_connections = {}
        
        for source_node, targets in connections.items():
            if source_node in node_names:
                validated_connections[source_node] = targets
        
        return validated_connections
    
    def _get_default_value(self, field: str) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—è"""
        
        defaults = {
            'name': 'Generated Workflow',
            'nodes': [],
            'connections': {},
            'active': False,
            'settings': {},
            'staticData': {}
        }
        
        return defaults.get(field, None)


# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_n8n_claude_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ N8N Claude Service"""
    
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ N8N Claude Service...")
    
    service = N8NClaudeService()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
    test_cases = [
        {
            "description": "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ webhook –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack",
            "params": {"complexity": "–ü—Ä–æ—Å—Ç–∞—è"}
        },
        {
            "description": "–ö–∞–∂–¥—ã–π —á–∞—Å –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ Google Sheets",
            "params": {"complexity": "–°—Ä–µ–¥–Ω—è—è"}
        }
    ]
    
    for i, test_case in enumerate(test_cases):
        print(f"\nüìù –¢–µ—Å—Ç {i+1}: {test_case['description']}")
        
        result = service.generate_workflow(
            test_case['description'], 
            test_case['params']
        )
        
        if result['status'] == 'success':
            workflow = result['workflow']
            print(f"‚úÖ Workflow —Å–æ–∑–¥–∞–Ω: {workflow['name']}")
            print(f"üîß Nodes: {len(workflow['nodes'])}")
            print(f"üîó Connections: {len(workflow['connections'])}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_path = f"/Users/hdv_1987/Desktop/Projects/N8N-Agent/examples/test_workflow_{i+1}.json"
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(workflow, f, indent=2, ensure_ascii=False)
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['message']}")

if __name__ == "__main__":
    test_n8n_claude_service()

#!/usr/bin/env python3
"""
N8N-Agent v1.0 - Streamlit Web Interface
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è n8n workflow –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
"""

import streamlit as st
import sys
import os
import json
import requests
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ core –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / 'core'))

try:
    from n8n_claude_service_mock import N8NClaudeServiceMock
    from n8n_production_client import N8NProductionClient
    from n8n_knowledge_base import N8NKnowledgeBase
except ImportError as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    st.stop()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="N8N-Agent v1.0",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
@st.cache_data
def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env"""
    config = {}
    env_path = Path(__file__).parent / '.env'
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    config[key] = value
    return config

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ n8n
@st.cache_data(ttl=30)
def check_n8n_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ n8n —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        response = requests.get('http://localhost:5678/healthz', timeout=5)
        return response.status_code == 200
    except:
        return False

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è workflow
@st.cache_data(ttl=30)
def get_workflows(api_key):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ workflow –∏–∑ n8n"""
    try:
        headers = {'X-N8N-API-KEY': api_key}
        response = requests.get('http://localhost:5678/api/v1/workflows', headers=headers)
        if response.status_code == 200:
            return response.json().get('data', [])
    except:
        pass
    return []

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üöÄ N8N-Agent v1.0")
    st.markdown("### AI —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è n8n workflow")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ n8n
        n8n_status = check_n8n_status()
        if n8n_status:
            st.success("‚úÖ n8n —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            st.error("‚ùå n8n —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            st.markdown("–ó–∞–ø—É—Å—Ç–∏—Ç–µ n8n: `docker run -p 5678:5678 n8nio/n8n`")
        
        # API –∫–ª—é—á–∏
        st.subheader("üîë API –ö–ª—é—á–∏")
        
        n8n_api_key = st.text_input(
            "N8N API Key:",
            value=config.get('N8N_API_KEY', ''),
            type="password",
            help="JWT —Ç–æ–∫–µ–Ω –æ—Ç n8n"
        )
        
        claude_api_key = st.text_input(
            "Claude API Key:",
            value=config.get('CLAUDE_API_KEY', ''),
            type="password",
            help="API –∫–ª—é—á –æ—Ç Anthropic Claude"
        )
        
        # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        st.subheader("üéõÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
        use_real_claude = st.checkbox(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π Claude API",
            value=bool(claude_api_key),
            help="–ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Mock —Ä–µ–∂–∏–º"
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if n8n_api_key and n8n_status:
            workflows = get_workflows(n8n_api_key)
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            st.metric("–í—Å–µ–≥–æ workflow", len(workflows))
            active_count = sum(1 for w in workflows if w.get('active'))
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö", active_count)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if not n8n_status:
        st.error("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ n8n —Å–µ—Ä–≤–µ—Ä!")
        st.stop()
    
    if not n8n_api_key:
        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ N8N API –∫–ª—é—á –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
        st.stop()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs([
        "üèóÔ∏è –°–æ–∑–¥–∞—Ç—å Workflow", 
        "üìã –ú–æ–∏ Workflow", 
        "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", 
        "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    ])
    
    # –í–∫–ª–∞–¥–∫–∞ 1: –°–æ–∑–¥–∞–Ω–∏–µ workflow
    with tab1:
        st.header("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ workflow")
        
        # –§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        with st.form("create_workflow"):
            st.subheader("üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞")
            
            # –ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π
            examples = {
                "Webhook ‚Üí Slack": "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ webhook –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏–∏",
                "Email ‚Üí Google Sheets": "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ email –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Google Sheets",
                "API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥": "–ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å API —Å–µ—Ä–≤–∏—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤": "–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ email"
            }
            
            example_choice = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:",
                ["–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"] + list(examples.keys())
            )
            
            if example_choice != "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç":
                default_description = examples[example_choice]
            else:
                default_description = ""
            
            description = st.text_area(
                "–û–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:",
                value=default_description,
                height=100,
                placeholder="–û–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å –Ω—É–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å..."
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            col1, col2 = st.columns(2)
            
            with col1:
                workflow_name = st.text_input(
                    "–ù–∞–∑–≤–∞–Ω–∏–µ workflow:",
                    value="",
                    placeholder="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
                )
                
                complexity = st.selectbox(
                    "–°–ª–æ–∂–Ω–æ—Å—Ç—å:",
                    ["–ü—Ä–æ—Å—Ç–æ–π (2-3 nodes)", "–°—Ä–µ–¥–Ω–∏–π (4-6 nodes)", "–°–ª–æ–∂–Ω—ã–π (7+ nodes)"]
                )
            
            with col2:
                trigger_type = st.selectbox(
                    "–¢–∏–ø –∑–∞–ø—É—Å–∫–∞:",
                    ["Webhook", "Schedule", "Manual", "Email", "File"]
                )
                
                auto_activate = st.checkbox(
                    "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è",
                    value=False,
                    help="–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å workflow –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                )
            
            # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            submitted = st.form_submit_button("üöÄ –°–æ–∑–¥–∞—Ç—å Workflow", type="primary")
            
            if submitted and description.strip():
                with st.spinner("üîÑ –°–æ–∑–¥–∞—é workflow..."):
                    try:
                        # –í—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞
                        if use_real_claude and claude_api_key:
                            st.info("üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π Claude API...")
                            # –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π Claude
                            claude_service = N8NClaudeServiceMock()
                        else:
                            st.info("üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ–º Mock —Ä–µ–∂–∏–º...")
                            claude_service = N8NClaudeServiceMock()
                        
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è workflow
                        workflow_data = claude_service.generate_workflow(
                            description=description,
                            complexity=complexity,
                            trigger_type=trigger_type.lower(),
                            workflow_name=workflow_name or None
                        )
                        
                        # –°–æ–∑–¥–∞–Ω–∏–µ –≤ n8n
                        client = N8NProductionClient(n8n_api_key)
                        result = client.create_workflow(workflow_data)
                        
                        if result.get('success'):
                            workflow_id = result['workflow_id']
                            st.success(f"‚úÖ Workflow —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                            
                            # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                            col1, col2 = st.columns(2)
                            with col1:
                                st.info(f"**ID:** {workflow_id}")
                                st.info(f"**URL:** http://localhost:5678/workflow/{workflow_id}")
                            
                            with col2:
                                if auto_activate:
                                    with st.spinner("üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É—é workflow..."):
                                        activation_result = client.activate_workflow(workflow_id)
                                        if activation_result.get('success'):
                                            st.success("‚úÖ Workflow –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
                                        else:
                                            st.warning("‚ö†Ô∏è Workflow —Å–æ–∑–¥–∞–Ω, –Ω–æ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                            
                            # –ü–æ–∫–∞–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                            with st.expander("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ workflow"):
                                st.json(workflow_data)
                        
                        else:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    # –í–∫–ª–∞–¥–∫–∞ 2: –°–ø–∏—Å–æ–∫ workflow
    with tab2:
        st.header("üìã –ú–æ–∏ Workflow")
        
        if n8n_api_key:
            workflows = get_workflows(n8n_api_key)
            
            if workflows:
                # –§–∏–ª—å—Ç—Ä—ã
                col1, col2, col3 = st.columns(3)
                with col1:
                    show_active_only = st.checkbox("–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ")
                with col2:
                    show_archived = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ")
                with col3:
                    sort_by = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", ["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å"])
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                filtered_workflows = workflows
                if show_active_only:
                    filtered_workflows = [w for w in filtered_workflows if w.get('active')]
                if not show_archived:
                    filtered_workflows = [w for w in filtered_workflows if not w.get('isArchived')]
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ workflow
                for workflow in filtered_workflows:
                    with st.expander(f"üîß {workflow['name']} ({'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if workflow.get('active') else '‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'})"):
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.markdown(f"**ID:** {workflow['id']}")
                            st.markdown(f"**–°–æ–∑–¥–∞–Ω:** {workflow['createdAt'][:10]}")
                            st.markdown(f"**Nodes:** {len(workflow.get('nodes', []))}")
                            st.markdown(f"**–¢—Ä–∏–≥–≥–µ—Ä–æ–≤:** {workflow.get('triggerCount', 0)}")
                        
                        with col2:
                            if st.button(f"üîó –û—Ç–∫—Ä—ã—Ç—å", key=f"open_{workflow['id']}"):
                                st.markdown(f"[–û—Ç–∫—Ä—ã—Ç—å –≤ n8n](http://localhost:5678/workflow/{workflow['id']})")
                            
                            if workflow.get('active'):
                                if st.button(f"‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", key=f"deactivate_{workflow['id']}"):
                                    st.info("–§—É–Ω–∫—Ü–∏—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                            else:
                                if st.button(f"‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", key=f"activate_{workflow['id']}"):
                                    st.info("–§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                        
                        # –ü–æ–∫–∞–∑ nodes
                        if st.checkbox(f"–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É", key=f"show_{workflow['id']}"):
                            st.json(workflow.get('nodes', []))
            else:
                st.info("üìã –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö workflow")
    
    # –í–∫–ª–∞–¥–∫–∞ 3: –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
    with tab3:
        st.header("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π N8N")
        
        try:
            kb = N8NKnowledgeBase()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–í—Å–µ–≥–æ nodes", len(kb.nodes))
            with col2:
                st.metric("–ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤", len(kb.patterns))
            with col3:
                st.metric("–ü—Ä–∏–º–µ—Ä–æ–≤", len(kb.examples))
            
            # Nodes
            st.subheader("üß© –î–æ—Å—Ç—É–ø–Ω—ã–µ Nodes")
            for node_type, node_info in kb.nodes.items():
                with st.expander(f"{node_info['emoji']} {node_type}"):
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {node_info['description']}")
                    st.markdown(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {node_info['category']}")
                    st.markdown(f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** {node_info['typical_use']}")
                    if node_info.get('parameters'):
                        st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                        for param in node_info['parameters']:
                            st.markdown(f"- {param}")
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
            st.subheader("üîÑ –ü–∞—Ç—Ç–µ—Ä–Ω—ã Workflow")
            for pattern_name, pattern_info in kb.patterns.items():
                with st.expander(f"üìã {pattern_name}"):
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {pattern_info['description']}")
                    st.markdown(f"**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {pattern_info['complexity']}")
                    st.markdown("**Nodes:**")
                    for node in pattern_info['nodes']:
                        st.markdown(f"- {node}")
                    st.markdown(f"**–ü—Ä–∏–º–µ—Ä:** {pattern_info['example']}")
        
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
    
    # –í–∫–ª–∞–¥–∫–∞ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    with tab4:
        st.header("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        st.subheader("üîå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üè• –¢–µ—Å—Ç N8N"):
                with st.spinner("–ü—Ä–æ–≤–µ—Ä—è—é n8n..."):
                    status = check_n8n_status()
                    if status:
                        st.success("‚úÖ N8N –¥–æ—Å—Ç—É–ø–µ–Ω")
                    else:
                        st.error("‚ùå N8N –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        with col2:
            if st.button("üß† –¢–µ—Å—Ç Claude"):
                with st.spinner("–ü—Ä–æ–≤–µ—Ä—è—é Claude API..."):
                    if claude_api_key:
                        st.success("‚úÖ Claude API –∫–ª—é—á —É–∫–∞–∑–∞–Ω")
                    else:
                        st.warning("‚ö†Ô∏è Claude API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Mock)")
        
        # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç")
        
        if st.button("üöÄ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π workflow"):
            with st.spinner("–°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π workflow..."):
                try:
                    claude_service = N8NClaudeServiceMock()
                    workflow_data = claude_service.generate_workflow(
                        description="–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç webhook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
                        complexity="–ü—Ä–æ—Å—Ç–æ–π (2-3 nodes)",
                        trigger_type="webhook"
                    )
                    
                    client = N8NProductionClient(n8n_api_key)
                    result = client.create_workflow(workflow_data)
                    
                    if result.get('success'):
                        st.success(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π workflow —Å–æ–∑–¥–∞–Ω: {result['workflow_id']}")
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
                
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        
        # –õ–æ–≥–∏ –∏ –æ—Ç–ª–∞–¥–∫–∞
        st.subheader("üìù –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        info_data = {
            "N8N Status": "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if check_n8n_status() else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            "N8N URL": "http://localhost:5678",
            "API Key": "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if n8n_api_key else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
            "Claude Mode": "üß† Real API" if (use_real_claude and claude_api_key) else "üé≠ Mock",
            "Workflows": len(get_workflows(n8n_api_key)) if n8n_api_key else 0
        }
        
        st.json(info_data)

if __name__ == "__main__":
    main()
